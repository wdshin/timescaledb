CREATE TABLE hyper (
  time BIGINT NOT NULL,
  device_id TEXT NOT NULL,
  sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10)
);
SELECT * FROM create_hypertable('hyper', 'time', chunk_time_interval => 10);
 create_hypertable 
-------------------
 
(1 row)

--check and not-null constraints are inherited through regular inheritance.
\set ON_ERROR_STOP 0
INSERT INTO hyper(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 9);
ERROR:  new row for relation "_hyper_1_1_chunk" violates check constraint "hyper_sensor_1_check"
INSERT INTO hyper(time, device_id,sensor_1) VALUES
(1257987700000000000, NULL, 11);
ERROR:  null value in column "device_id" violates not-null constraint
\set ON_ERROR_STOP 1
INSERT INTO hyper(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
INSERT INTO hyper(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
----------------------- UNIQUE CONSTRAINTS ------------------
CREATE TABLE hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name (
  time BIGINT NOT NULL UNIQUE,
  device_id TEXT NOT NULL,
  sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10)
);
SELECT * FROM create_hypertable('hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name', 'time', chunk_time_interval => 10);
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
INSERT INTO hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name(time, device_id,sensor_1) VALUES
(1257987800000000000, 'dev2', 11);
\set ON_ERROR_STOP 0
INSERT INTO hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
ERROR:  duplicate key value violates unique constraint "4_1_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time"
\set ON_ERROR_STOP 1
-- Show constraints on main tables
SELECT * FROM test.show_constraints('hyper');
      Constraint      | Type |  Columns   | Index |            Expr            
----------------------+------+------------+-------+----------------------------
 hyper_sensor_1_check | c    | {sensor_1} | -     | (sensor_1 > (10)::numeric)
(1 row)

SELECT * FROM test.show_constraints('hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name');
                           Constraint                            | Type |  Columns   |                              Index                              |            Expr            
-----------------------------------------------------------------+------+------------+-----------------------------------------------------------------+----------------------------
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -                                                               | (sensor_1 > (10)::numeric)
 hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key | u    | {time}     | hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key | 
(2 rows)

--should have unique constraint not just unique index
SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_2_4_chunk');
                           Constraint                            | Type |  Columns   |                                          Index                                          |                                           Expr                                           
-----------------------------------------------------------------+------+------------+-----------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------
 4_1_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time | u    | {time}     | _timescaledb_internal."4_1_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time" | 
 constraint_4                                                    | c    | {time}     | -                                                                                       | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -                                                                                       | (sensor_1 > (10)::numeric)
(3 rows)

ALTER TABLE hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name DROP CONSTRAINT hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key;
-- The constraint should have been removed from the chunk as well
SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_2_4_chunk');
                           Constraint                            | Type |  Columns   | Index |                                           Expr                                           
-----------------------------------------------------------------+------+------------+-------+------------------------------------------------------------------------------------------
 constraint_4                                                    | c    | {time}     | -     | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -     | (sensor_1 > (10)::numeric)
(2 rows)

--uniqueness not enforced
INSERT INTO hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev3', 11);
--shouldn't be able to create constraint
\set ON_ERROR_STOP 0
ALTER TABLE hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name ADD CONSTRAINT hyper_unique_time_key UNIQUE (time);
ERROR:  could not create unique index "4_3_hyper_unique_time_key"
\set ON_ERROR_STOP 1
DELETE FROM hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name WHERE device_id = 'dev3';
-- Try multi-alter table statement with a constraint without a name
ALTER TABLE hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name
      ADD CHECK (time > 0),
      ADD UNIQUE (time);
SELECT * FROM test.show_constraints('hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name');
                           Constraint                            | Type |  Columns   |                              Index                              |            Expr            
-----------------------------------------------------------------+------+------------+-----------------------------------------------------------------+----------------------------
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -                                                               | (sensor_1 > (10)::numeric)
 hyper_unique_with_looooooooooooooooooooooooooooooooo_time_check | c    | {time}     | -                                                               | ("time" > 0)
 hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key | u    | {time}     | hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key | 
(3 rows)

SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_2_4_chunk');
                           Constraint                            | Type |  Columns   |                                          Index                                          |                                           Expr                                           
-----------------------------------------------------------------+------+------------+-----------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------
 4_4_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time | u    | {time}     | _timescaledb_internal."4_4_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time" | 
 constraint_4                                                    | c    | {time}     | -                                                                                       | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -                                                                                       | (sensor_1 > (10)::numeric)
 hyper_unique_with_looooooooooooooooooooooooooooooooo_time_check | c    | {time}     | -                                                                                       | ("time" > 0)
(4 rows)

ALTER TABLE  hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name
DROP CONSTRAINT hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key,
DROP CONSTRAINT hyper_unique_with_looooooooooooooooooooooooooooooooo_time_check;
SELECT * FROM test.show_constraints('hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name');
                           Constraint                            | Type |  Columns   | Index |            Expr            
-----------------------------------------------------------------+------+------------+-------+----------------------------
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -     | (sensor_1 > (10)::numeric)
(1 row)

SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_2_4_chunk');
                           Constraint                            | Type |  Columns   | Index |                                           Expr                                           
-----------------------------------------------------------------+------+------------+-------+------------------------------------------------------------------------------------------
 constraint_4                                                    | c    | {time}     | -     | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -     | (sensor_1 > (10)::numeric)
(2 rows)

CREATE UNIQUE INDEX hyper_unique_with_looooooooooooooooooooooooooooooooo_time_idx 
ON hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name (time);
\set ON_ERROR_STOP 0
-- Try adding constraint using existing index
ALTER TABLE hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name
ADD CONSTRAINT hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key UNIQUE
USING INDEX hyper_unique_with_looooooooooooooooooooooooooooooooo_time_idx;
NOTICE:  ALTER TABLE / ADD CONSTRAINT USING INDEX will rename index "hyper_unique_with_looooooooooooooooooooooooooooooooo_time_idx" to "hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key"
ERROR:  Hypertables currently do not support adding a constraint using an existing index.
\set ON_ERROR_STOP 1
DROP INDEX hyper_unique_with_looooooooooooooooooooooooooooooooo_time_idx;
--now can create
ALTER TABLE  hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name
ADD CONSTRAINT hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key UNIQUE (time);
SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_2_4_chunk');
                           Constraint                            | Type |  Columns   |                                          Index                                          |                                           Expr                                           
-----------------------------------------------------------------+------+------------+-----------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------
 4_6_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time | u    | {time}     | _timescaledb_internal."4_6_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time" | 
 constraint_4                                                    | c    | {time}     | -                                                                                       | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_unique_with_looooooooooooooooooooooooooooo_sensor_1_check | c    | {sensor_1} | -                                                                                       | (sensor_1 > (10)::numeric)
(3 rows)

--test adding constraint with same name to different table -- should fail
\set ON_ERROR_STOP 0
ALTER TABLE hyper 
ADD CONSTRAINT hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key UNIQUE (time);
ERROR:  relation "hyper_unique_with_looooooooooooooooooooooooooooooooooo_time_key" already exists
\set ON_ERROR_STOP 1
--uniquness violation fails
\set ON_ERROR_STOP 0
INSERT INTO hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name(time, device_id,sensor_1) 
VALUES (1257987700000000000, 'dev2', 11);
ERROR:  duplicate key value violates unique constraint "4_6_hyper_unique_with_looooooooooooooooooooooooooooooooooo_time"
\set ON_ERROR_STOP 1
--cannot create unique constraint on non-partition column
\set ON_ERROR_STOP 0
ALTER TABLE hyper_unique_with_looooooooooooooooooooooooooooooooooooong_name 
ADD CONSTRAINT hyper_unique_invalid UNIQUE (device_id);
ERROR:  Cannot create a unique index without the column: time (used in partitioning)
\set ON_ERROR_STOP 1
----------------------- PRIMARY KEY  ------------------
CREATE TABLE hyper_pk (
  time BIGINT NOT NULL PRIMARY KEY,
  device_id TEXT NOT NULL,
  sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10)
);
SELECT * FROM create_hypertable('hyper_pk', 'time', chunk_time_interval => 10);
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_pk(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
\set ON_ERROR_STOP 0
INSERT INTO hyper_pk(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
ERROR:  duplicate key value violates unique constraint "6_8_hyper_pk_pkey"
\set ON_ERROR_STOP 1
--should have unique constraint not just unique index
SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_3_6_chunk');
       Constraint        | Type |  Columns   |                   Index                   |                                           Expr                                           
-------------------------+------+------------+-------------------------------------------+------------------------------------------------------------------------------------------
 6_8_hyper_pk_pkey       | p    | {time}     | _timescaledb_internal."6_8_hyper_pk_pkey" | 
 constraint_6            | c    | {time}     | -                                         | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_pk_sensor_1_check | c    | {sensor_1} | -                                         | (sensor_1 > (10)::numeric)
(3 rows)

ALTER TABLE hyper_pk DROP CONSTRAINT hyper_pk_pkey;
SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_3_6_chunk');
       Constraint        | Type |  Columns   | Index |                                           Expr                                           
-------------------------+------+------------+-------+------------------------------------------------------------------------------------------
 constraint_6            | c    | {time}     | -     | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_pk_sensor_1_check | c    | {sensor_1} | -     | (sensor_1 > (10)::numeric)
(2 rows)

--uniqueness not enforced
INSERT INTO hyper_pk(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev3', 11);
--shouldn't be able to create pk
\set ON_ERROR_STOP 0
ALTER TABLE hyper_pk ADD CONSTRAINT hyper_pk_pkey PRIMARY KEY (time);
ERROR:  could not create unique index "6_9_hyper_pk_pkey"
\set ON_ERROR_STOP 1
DELETE FROM hyper_pk WHERE device_id = 'dev3';
--cannot create pk constraint on non-partition column
\set ON_ERROR_STOP 0
ALTER TABLE hyper_pk ADD CONSTRAINT hyper_pk_invalid PRIMARY KEY (device_id);
ERROR:  Cannot create a unique index without the column: time (used in partitioning)
\set ON_ERROR_STOP 1
--now can create
ALTER TABLE hyper_pk ADD CONSTRAINT hyper_pk_pkey PRIMARY KEY (time);
SELECT * FROM test.show_constraints('_timescaledb_internal._hyper_3_6_chunk');
       Constraint        | Type |  Columns   |                   Index                    |                                           Expr                                           
-------------------------+------+------------+--------------------------------------------+------------------------------------------------------------------------------------------
 6_10_hyper_pk_pkey      | p    | {time}     | _timescaledb_internal."6_10_hyper_pk_pkey" | 
 constraint_6            | c    | {time}     | -                                          | (("time" >= '1257987700000000000'::bigint) AND ("time" < '1257987700000000010'::bigint))
 hyper_pk_sensor_1_check | c    | {sensor_1} | -                                          | (sensor_1 > (10)::numeric)
(3 rows)

--test adding constraint with same name to different table -- should fail
\set ON_ERROR_STOP 0
ALTER TABLE hyper ADD CONSTRAINT hyper_pk_pkey UNIQUE (time);
ERROR:  relation "hyper_pk_pkey" already exists
\set ON_ERROR_STOP 1
--uniquness violation fails
\set ON_ERROR_STOP 0
INSERT INTO hyper_pk(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
ERROR:  duplicate key value violates unique constraint "6_10_hyper_pk_pkey"
\set ON_ERROR_STOP 1
----------------------- FOREIGN KEY  ------------------
CREATE TABLE devices(
    device_id TEXT NOT NULL,
    PRIMARY KEY (device_id)
);
CREATE TABLE hyper_fk (
  time BIGINT NOT NULL PRIMARY KEY,
  device_id TEXT NOT NULL REFERENCES devices(device_id),
  sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10)
);
SELECT * FROM create_hypertable('hyper_fk', 'time', chunk_time_interval => 10);
 create_hypertable 
-------------------
 
(1 row)

--fail fk constraint
\set ON_ERROR_STOP 0
INSERT INTO hyper_fk(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
ERROR:  insert or update on table "_hyper_4_7_chunk" violates foreign key constraint "7_11_hyper_fk_device_id_fkey"
\set ON_ERROR_STOP 1
INSERT INTO devices VALUES ('dev2');
INSERT INTO hyper_fk(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
--delete should fail
\set ON_ERROR_STOP 0
DELETE FROM devices;
ERROR:  update or delete on table "devices" violates foreign key constraint "8_13_hyper_fk_device_id_fkey" on table "_hyper_4_8_chunk"
\set ON_ERROR_STOP 1
ALTER TABLE hyper_fk DROP CONSTRAINT hyper_fk_device_id_fkey;
--should now be able to add non-fk rows
INSERT INTO hyper_fk(time, device_id,sensor_1) VALUES
(1257987700000000001, 'dev3', 11);
--can't add fk because of dev3 row
\set ON_ERROR_STOP 0
ALTER TABLE hyper_fk ADD CONSTRAINT hyper_fk_device_id_fkey
FOREIGN KEY (device_id) REFERENCES devices(device_id);
ERROR:  insert or update on table "_hyper_4_8_chunk" violates foreign key constraint "8_15_hyper_fk_device_id_fkey"
\set ON_ERROR_STOP 1
DELETE FROM hyper_fk WHERE device_id = 'dev3';
ALTER TABLE hyper_fk ADD CONSTRAINT hyper_fk_device_id_fkey
FOREIGN KEY (device_id) REFERENCES devices(device_id);
\set ON_ERROR_STOP 0
INSERT INTO hyper_fk(time, device_id,sensor_1) VALUES
(1257987700000000002, 'dev3', 11);
ERROR:  insert or update on table "_hyper_4_8_chunk" violates foreign key constraint "8_16_hyper_fk_device_id_fkey"
\set ON_ERROR_STOP 1
----------------------- FOREIGN KEY INTO A HYPERTABLE  ------------------
--FOREIGN KEY references into a hypertable are currently broken.
--The referencing table will never find the corresponding row in the hypertable
--since it will only search the parent. Thus any insert will result in an ERROR
--TODO: block such foreign keys or fix. (Hard to block on create table so punting for now)
CREATE TABLE hyper_for_ref (
  time BIGINT NOT NULL PRIMARY KEY,
  device_id TEXT NOT NULL,
  sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10)
);
SELECT * FROM create_hypertable('hyper_for_ref', 'time', chunk_time_interval => 10);
 create_hypertable 
-------------------
 
(1 row)

\set ON_ERROR_STOP 0
CREATE TABLE referrer (
    time BIGINT NOT NULL REFERENCES hyper_for_ref(time)
);
ERROR:  Foreign keys to hypertables are not supported.
\set ON_ERROR_STOP 1
CREATE TABLE referrer2 (
   time BIGINT NOT NULL
);
\set ON_ERROR_STOP 0
ALTER TABLE referrer2 ADD CONSTRAINT hyper_fk_device_id_fkey
FOREIGN KEY (time) REFERENCES  hyper_for_ref(time);
ERROR:  Foreign keys to hypertables are not supported.
\set ON_ERROR_STOP 1
----------------------- EXCLUSION CONSTRAINT  ------------------
CREATE TABLE hyper_ex (
    time BIGINT,
    device_id TEXT NOT NULL REFERENCES devices(device_id),
    sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10),
    canceled boolean DEFAULT false,
    EXCLUDE USING btree (
        time WITH =, device_id WITH =
    ) WHERE (not canceled)
);
SELECT * FROM create_hypertable('hyper_ex', 'time', chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'));
NOTICE:  Adding NOT NULL constraint to time column time (NULL time values not allowed)
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_ex(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 11);
\set ON_ERROR_STOP 0
INSERT INTO hyper_ex(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 12);
ERROR:  conflicting key value violates exclusion constraint "9_18_hyper_ex_time_device_id_excl"
\set ON_ERROR_STOP 1
ALTER TABLE hyper_ex DROP CONSTRAINT hyper_ex_time_device_id_excl;
--can now add
INSERT INTO hyper_ex(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 12);
--cannot add because of conflicts
\set ON_ERROR_STOP 0
ALTER TABLE hyper_ex ADD CONSTRAINT hyper_ex_time_device_id_excl
    EXCLUDE USING btree (
        time WITH =, device_id WITH =
    ) WHERE (not canceled)
;
ERROR:  could not create exclusion constraint "9_19_hyper_ex_time_device_id_excl"
\set ON_ERROR_STOP 1
DELETE FROM hyper_ex WHERE sensor_1 = 12;
ALTER TABLE hyper_ex ADD CONSTRAINT hyper_ex_time_device_id_excl
    EXCLUDE USING btree (
        time WITH =, device_id WITH =
    ) WHERE (not canceled)
;
\set ON_ERROR_STOP 0
INSERT INTO hyper_ex(time, device_id,sensor_1) VALUES
(1257987700000000000, 'dev2', 12);
ERROR:  conflicting key value violates exclusion constraint "9_20_hyper_ex_time_device_id_excl"
\set ON_ERROR_STOP 1
--cannot add exclusion constraint without partition key.
CREATE TABLE hyper_ex_invalid (
    time BIGINT,
    device_id TEXT NOT NULL REFERENCES devices(device_id),
    sensor_1 NUMERIC NULL DEFAULT 1 CHECK (sensor_1 > 10),
    canceled boolean DEFAULT false,
    EXCLUDE USING btree (
        device_id WITH =
    ) WHERE (not canceled)
);
\set ON_ERROR_STOP 0
SELECT * FROM create_hypertable('hyper_ex_invalid', 'time', chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'));
NOTICE:  Adding NOT NULL constraint to time column time (NULL time values not allowed)
ERROR:  Cannot create a unique index without the column: time (used in partitioning)
\set ON_ERROR_STOP 1
